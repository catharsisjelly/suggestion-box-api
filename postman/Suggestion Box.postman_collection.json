{
	"info": {
		"_postman_id": "8f7ec5fa-817f-4213-a070-eb4ce9d9058d",
		"name": "Suggestion Box",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Box",
			"item": [
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has members', function() {",
									"    let responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('hydra:member');",
									"    if (responseData['hydra:member'].length > 0) {",
									"       pm.environment.set('box-id', responseData['hydra:member'][0]['id']);",
									"       pm.environment.set('box-iri', responseData['hydra:member'][0]['@id']);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/boxes",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"boxes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Ensure the response has an id\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('box-id', jsonData.id);",
									"    pm.environment.set('box-iri', jsonData['@id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"My Box\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/boxes",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"boxes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has id', function() {",
									"    let responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.environment.set('box-id', responseData.id);",
									"    pm.environment.set('box-iri', responseData['@id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/boxes/{{box-id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"boxes",
								"{{box-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has id', function() {",
									"    let responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.environment.set('box-id', responseData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/merge-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"My Box Updated\",\n    \"isOpen\": true,\n    \"isPublic\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/boxes/{{box-id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"boxes",
								"{{box-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 204', function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/boxes/{{box-id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"boxes",
								"{{box-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SuggestionType",
			"item": [
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has members', function() {",
									"    let responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('hydra:member');",
									"    if (responseData['hydra:member'].length > 0) {",
									"       pm.environment.set('suggestion-type-id', responseData['hydra:member'][0]['id']);",
									"       pm.environment.set('suggestion-type-iri', responseData['hydra:member'][0]['@id']);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/suggestion_types",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"suggestion_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Ensure the response has an id\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('suggestion-type-id', jsonData.id);",
									"    pm.environment.set('suggestion-type-iri', jsonData['@id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Location\",\n    \"box\": \"{{box-iri}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/suggestion_types",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"suggestion_types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ensure the response has an id\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('suggestion-type-id', jsonData.id);",
									"    pm.environment.set('suggestion-type-iri', jsonData['@id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/suggestion_types/{{suggestion-type-id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"suggestion_types",
								"{{suggestion-type-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ensure the response has an id\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('suggestion-type-id', jsonData.id);",
									"    pm.environment.set('suggestion-type-iri', jsonData['@id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/merge-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Location\",\n    \"description\": \"Foo bar\",\n    \"box\": \"{{box-iri}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/suggestion_types/{{suggestion-type-id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"suggestion_types",
								"{{suggestion-type-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 204', function() {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/suggestion_types/{{suggestion-type-id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"suggestion_types",
								"{{suggestion-type-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Suggestion",
			"item": [
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has members', function() {",
									"    let responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('hydra:member');",
									"    if (responseData['hydra:member'].length > 0) {",
									"        pm.environment.set('suggestion-id', responseData['hydra:member'][0]['id']);",
									"        pm.environment.set('suggestion-iri', responseData['hydra:member'][0]['@id']);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/suggestions",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"suggestions"
							],
							"query": [
								{
									"key": "order[created]",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "discarded",
									"value": "true",
									"disabled": true
								},
								{
									"key": "box",
									"value": "01F1J2DTAGKXP55XA9495D36JV",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Ensure the response has an id\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('suggestion-id', jsonData.id);",
									"    pm.environment.set('suggestion-iri', jsonData['@id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": \"Location\",\n    \"box\": \"{{box-iri}}\",\n    \"suggestionType\": \"{{suggestion-type-iri}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/suggestions",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"suggestions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ensure the response has an id\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('suggestion-id', jsonData.id);",
									"    pm.environment.set('suggestion-iri', jsonData['@id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/suggestions/{{suggestion-id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"suggestions",
								"{{suggestion-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ensure the response has an id\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set('suggestion-id', jsonData.id);",
									"    pm.environment.set('suggestion-iri', jsonData['@id']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/merge-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"discarded\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{scheme}}://{{host}}:{{port}}/api/suggestions/{{suggestion-id}}",
							"protocol": "{{scheme}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"suggestions",
								"{{suggestion-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}